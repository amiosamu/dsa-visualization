{"ast":null,"code":"var _jsxFileName = \"/home/dias/projects/amiosamu.github.io/dsa-visualization/src/DSAVisualizer/DSAVisualizer.jsx\";\nimport React, { Component } from 'react';\nimport Node from './Node/Node';\nimport './DSAVisualizer.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\nexport default class DSAVisualizer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n      mouseIsPressed: false\n    };\n  }\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({\n      grid\n    });\n  }\n  handeMouseDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid,\n      mouseIsPressed: true\n    });\n  }\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid\n    });\n  }\n  handleMouseUp() {\n    this.setState({\n      mouseIsPressed: false\n    });\n  }\n  animateDijkstra(visitedNodesInorder, nodesInShortestPathOrder) {\n    for (let i = 0; i < visitedNodesInorder.length; i++) {\n      if (i === visitedNodesInorder.length) {\n        setTimeout(() => {});\n      }\n    }\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Foo\", /*#__PURE__*/_jsxDEV(Node, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this);\n  }\n}\nconst getInitialGrid = () => {\n  const grid = [];\n  for (let row = 0; row < 20; row++) {\n    const currentRow = [];\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(col, row));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null\n  };\n};\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isWall: !node.isWall\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};","map":{"version":3,"names":["React","Component","Node","jsxDEV","_jsxDEV","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","DSAVisualizer","constructor","props","state","grid","mouseIsPressed","componentDidMount","getInitialGrid","setState","handeMouseDown","row","col","newGrid","getNewGridWithWallToggled","handleMouseEnter","handleMouseUp","animateDijkstra","visitedNodesInorder","nodesInShortestPathOrder","i","length","setTimeout","render","children","fileName","_jsxFileName","lineNumber","columnNumber","currentRow","push","createNode","isStart","isFinish","distance","Infinity","isVisited","isWall","previousNode","slice","node","newNode"],"sources":["/home/dias/projects/amiosamu.github.io/dsa-visualization/src/DSAVisualizer/DSAVisualizer.jsx"],"sourcesContent":["import React, { Component } from 'react';\nimport Node from './Node/Node';\n\nimport './DSAVisualizer.css';\n\n\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\n\n\nexport default class DSAVisualizer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            grid : [],\n            mouseIsPressed: false,\n        };\n    }\n    componentDidMount() {\n        const grid = getInitialGrid();\n        this.setState({grid});\n    }\n\n    handeMouseDown(row, col){\n        const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n        this.setState({grid: newGrid, mouseIsPressed: true});\n    }\n\n    handleMouseEnter(row, col){\n        if (!this.state.mouseIsPressed) return;\n        const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n        this.setState({grid: newGrid});\n    }\n\n    handleMouseUp(){\n        this.setState({mouseIsPressed: false});\n    }\n\n    animateDijkstra (visitedNodesInorder, nodesInShortestPathOrder){\n        for (let i = 0 ; i < visitedNodesInorder.length; i++){\n            if (i === visitedNodesInorder.length){\n                setTimeout(() => {\n\n                })\n            }\n        }\n    }\n\n    animate\n\n\n    render() {\n        return (\n            <div>\n                Foo\n                <Node />\n            </div>\n        );\n    }\n}\n\n\nconst getInitialGrid = () => {\n    const grid = [];\n    for (let row = 0; row < 20; row++){\n        const currentRow = [];\n        for (let col = 0; col < 50; col++){\n            currentRow.push(createNode(col, row));\n        }\n        grid.push(currentRow)\n    }\n    return grid;\n}\n\nconst createNode = (col, row) => {\n    return {\n      col,\n      row,\n      isStart: row === START_NODE_ROW && col === START_NODE_COL,\n      isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n      distance: Infinity,\n      isVisited: false,\n      isWall: false,\n      previousNode: null,\n    };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    const newNode = {\n        ...node,\n        isWall: !node.isWall,\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}