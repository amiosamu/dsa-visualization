{"ast":null,"code":"export function dijkstra(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift();\n    if (closestNode.isWall) continue;\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const {\n    col,\n    row\n  } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n  }\n  return nodesInShortestPathOrder;\n}","map":{"version":3,"names":["dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","getAllNodes","length","sortNodesByDistance","closestNode","shift","isWall","Infinity","isVisited","push","updateUnvisitedNeighbors","sort","nodeA","nodeB","node","unvisitedNeighbors","getUnvisitedNeighbors","neighbor","previousNode","neighbors","col","row","filter","nodes","getNodesInShortestPathOrder","nodesInShortestPathOrder","currentNode","unshift"],"sources":["/home/dias/projects/amiosamu.github.io/dsa-visualization/src/algorithms/dijkstra.js"],"sourcesContent":["export function dijkstra(grid, startNode, finishNode) {\n    const visitedNodesInOrder = [];\n    startNode.distance = 0;\n    const unvisitedNodes = getAllNodes(grid);\n\n    while (!!unvisitedNodes.length){\n        sortNodesByDistance(unvisitedNodes);\n        const closestNode = unvisitedNodes.shift();\n        if (closestNode.isWall) continue;\n        if (closestNode.distance === Infinity) return visitedNodesInOrder;\n        closestNode.isVisited = true;\n        visitedNodesInOrder.push(closestNode);\n        if (closestNode === finishNode) return visitedNodesInOrder;\n        updateUnvisitedNeighbors(closestNode, grid);\n    }\n}\n\nfunction sortNodesByDistance(unvisitedNodes){\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n    const unvisitedNeighbors = getUnvisitedNeighbors(node,grid);\n    for (const neighbor of unvisitedNeighbors){\n        neighbor.distance = node.distance+1;\n        neighbor.previousNode = node;\n    }\n}\n\n\nfunction getUnvisitedNeighbors(node, grid){\n    const neighbors = [];\n    const {col, row} = node;\n    if (row > 0) neighbors.push(grid[row-1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row+1][col]);  if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    return neighbors.filter(neighbor => !neighbor.isVisited);\n}\nfunction getAllNodes(grid) {\n    const nodes = [];\n    for (const row of grid) {\n        for (const node of row) {\n            nodes.push(node);\n        }\n    }\n    return nodes;\n}\n\nexport function getNodesInShortestPathOrder(finishNode){\n    const nodesInShortestPathOrder = [];\n    let currentNode = finishNode;\n    while (currentNode !== null){\n        nodesInShortestPathOrder.unshift(currentNode);\n    }\n    return nodesInShortestPathOrder\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}